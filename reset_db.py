# reset_db.py
import psycopg2
from sqlalchemy import create_engine
from app.models.base import Base
import sys
import os
import time
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT
import app.models.player
import app.models.stable
import app.models.building
import app.models.box
import app.models.horse


sys.path.append(os.path.dirname(os.path.abspath(__file__)))
from app.core.config import settings  # –±–µ—Ä—ë—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env

# –î–∞–Ω–Ω—ã–µ –∏–∑ .env
DB_NAME = settings.DB_NAME
DB_USER = settings.DB_USER
DB_PASSWORD = settings.DB_PASSWORD
DB_HOST = settings.DB_HOST
DB_PORT = "5432"  # –ú–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ .env –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
DATABASE_URL = settings.DATABASE_URL

# 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ postgres –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
print(f"üîÅ –£–¥–∞–ª–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {DB_NAME}")
try:
    admin_conn = psycopg2.connect(
        dbname="postgres",
        user=DB_USER,
        password=DB_PASSWORD,
        host=DB_HOST,
        port=DB_PORT
    )
    admin_conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
    admin_cursor = admin_conn.cursor()

    # 2. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î (–∏–Ω–∞—á–µ DROP –º–æ–∂–µ—Ç —É–ø–∞—Å—Ç—å)
    admin_cursor.execute(f"""
        SELECT pg_terminate_backend(pid)
        FROM pg_stat_activity
        WHERE datname = '{DB_NAME}' AND pid <> pg_backend_pid();
    """)

    admin_cursor.execute(f"DROP DATABASE IF EXISTS {DB_NAME};")
    admin_cursor.execute(f"CREATE DATABASE {DB_NAME};")

    admin_cursor.close()
    admin_conn.close()

    print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –Ω–æ–≤–æ–π –±–∞–∑–µ...")

    # 3. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ω–æ–≤–æ–π –ë–î –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    engine = create_engine(DATABASE_URL)
    Base.metadata.create_all(bind=engine)

    print("‚úÖ –ë–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞.")
except Exception as e:
    print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã:", e)
